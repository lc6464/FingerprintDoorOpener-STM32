/**
 * @file FPM383C_Example.cpp
 * @brief FPM383C 指纹识别模块使用示例
 * @details 展示如何使用重构后的 FPM383C 类
 */

#include "FPM383C.h"
#include "main.h"
#include <cstdio>

// 假设已经初始化了 UART 和 GPIO
extern UART_HandleTypeDef huart1;

// 定义引脚
static PortPinPair touchPin(TOUCH_GPIO_Port, TOUCH_Pin);
static PortPinPair powerPin(POWER_GPIO_Port, POWER_Pin);

// 创建 FPM383C 实例
static FPM383C fingerprint(&huart1, touchPin, &powerPin);

/**
 * @brief 示例1：基本初始化和测试
 */
void Example_BasicInitialization() {
    printf("=== FPM383C 基本初始化示例 ===\n");

    auto status = fingerprint.Init();
    if (status == FPM383C::Status::OK) {
        printf("✓ 模块初始化成功\n");
    } else {
        printf("✗ 模块初始化失败，错误码: %d\n", static_cast<int>(status));
        return;
    }

    // 获取已注册指纹数量
    uint16_t count = 0;
    status = fingerprint.GetFingerprintCount(count);
    if (status == FPM383C::Status::OK) {
        printf("✓ 当前已注册指纹数量: %d\n", count);
    } else {
        printf("✗ 获取指纹数量失败\n");
    }
}

/**
 * @brief 示例2：同步指纹匹配
 */
void Example_SyncMatch() {
    printf("\n=== 同步指纹匹配示例 ===\n");
    printf("请将手指放在传感器上...\n");

    // 等待手指按下
    bool isPressed = false;
    while (!isPressed) {
        fingerprint.IsFingerPressed(isPressed);
        HAL_Delay(100);
    }

    printf("✓ 检测到手指，开始匹配...\n");

    // 进行匹配
    FPM383C::MatchResult result;
    auto status = fingerprint.Match(result);

    if (status == FPM383C::Status::OK) {
        if (result.IsSuccess) {
            printf("✓ 匹配成功！\n");
            printf("  - 指纹 ID: %d\n", result.FingerId);
            printf("  - 匹配分数: %d\n", result.MatchScore);
        } else {
            printf("✗ 匹配失败，未找到匹配的指纹\n");
        }
    } else {
        printf("✗ 匹配操作失败，错误码: %d\n", static_cast<int>(status));
    }
}

/**
 * @brief 示例3：同步指纹注册（带进度回调）
 */
void Example_SyncEnroll() {
    printf("\n=== 同步指纹注册示例 ===\n");

    const uint16_t fingerId = 0xFFFF;  // 自动分配 ID
    const uint8_t requiredPresses = 6;  // 需要按压 6 次

    printf("开始注册新指纹，需要按压 %d 次\n", requiredPresses);

    FPM383C::EnrollStatus finalStatus;

    // 带进度回调的注册
    auto status = fingerprint.AutoEnroll(
        fingerId,
        requiredPresses,
        finalStatus,
        [](const FPM383C::EnrollStatus &status) {
            // 进度回调
            if (!status.IsComplete) {
                printf("  进度: %d%% (步骤 %d/%d)\n",
                    status.Progress, status.Step, 6);
            }
        }
    );

    if (status == FPM383C::Status::OK && finalStatus.IsComplete) {
        printf("✓ 注册成功！\n");
        printf("  - 分配的指纹 ID: %d\n", finalStatus.FingerId);
    } else {
        printf("✗ 注册失败，错误码: %d\n", static_cast<int>(status));
    }
}

/**
 * @brief 示例4：使用异步回调（推荐方式）
 */
void Example_AsyncCallbacks() {
    printf("\n=== 异步回调示例 ===\n");

    // 注册匹配成功回调
    fingerprint.RegisterMatchCallback([](const FPM383C::MatchResult &result) {
        if (result.IsSuccess) {
            printf("🎉 异步匹配成功！\n");
            printf("  - 指纹 ID: %d\n", result.FingerId);
            printf("  - 匹配分数: %d\n", result.MatchScore);

            // 在这里可以触发开门等操作
            // HAL_GPIO_WritePin(DOOR_LOCK_GPIO_Port, DOOR_LOCK_Pin, GPIO_PIN_SET);
        } else {
            printf("❌ 异步匹配失败\n");
        }
    });

    // 注册注册进度回调
    fingerprint.RegisterEnrollProgressCallback([](const FPM383C::EnrollStatus &status) {
        printf("📊 注册进度: %d%% (步骤 %d)\n", status.Progress, status.Step);
    });

    // 注册注册完成回调
    fingerprint.RegisterEnrollCompleteCallback([](const FPM383C::EnrollStatus &status) {
        printf("✅ 注册完成！指纹 ID: %d\n", status.FingerId);
    });

    printf("✓ 回调函数已注册\n");
    printf("提示: 调用 StartAsyncMatch() 或 StartAsyncEnroll() 开始异步操作\n");

    // TODO: 实现异步操作
    // fingerprint.StartAsyncMatch();
    // fingerprint.StartAsyncEnroll();
}

/**
 * @brief 示例5：删除指纹
 */
void Example_DeleteFingerprint() {
    printf("\n=== 删除指纹示例 ===\n");

    // 删除指定 ID 的指纹
    const uint16_t fingerId = 1;
    auto status = fingerprint.DeleteFingerprint(fingerId);

    if (status == FPM383C::Status::OK) {
        printf("✓ 成功删除指纹 ID: %d\n", fingerId);
    } else {
        printf("✗ 删除失败，错误码: %d\n", static_cast<int>(status));
    }

    // 删除所有指纹（谨慎使用！）
    // status = fingerprint.DeleteAllFingerprints();
    // if (status == FPM383C::Status::OK) {
    //     printf("✓ 成功删除所有指纹\n");
    // }
}

/**
 * @brief 示例6：设置密码
 */
void Example_SetPassword() {
    printf("\n=== 设置密码示例 ===\n");

    const uint32_t newPassword = 0x12345678;
    auto status = fingerprint.SetPassword(newPassword, true);  // true = 保存到 Flash

    if (status == FPM383C::Status::OK) {
        printf("✓ 密码设置成功\n");
        printf("  新密码: 0x%08X\n", newPassword);
    } else {
        printf("✗ 密码设置失败，错误码: %d\n", static_cast<int>(status));
    }
}

/**
 * @brief 示例7：错误处理
 */
void Example_ErrorHandling() {
    printf("\n=== 错误处理示例 ===\n");

    FPM383C::MatchResult result;
    auto status = fingerprint.Match(result);

    // 详细的错误处理
    switch (status) {
        case FPM383C::Status::OK:
            printf("✓ 操作成功\n");
            if (result.IsSuccess) {
                printf("  匹配到指纹 ID: %d\n", result.FingerId);
            } else {
                printf("  未匹配到指纹\n");
            }
            break;

        case FPM383C::Status::Timeout:
            printf("✗ 操作超时，请检查模块连接\n");
            break;

        case FPM383C::Status::TransmitError:
            printf("✗ 发送错误，请检查 UART 配置\n");
            break;

        case FPM383C::Status::ReceiveError:
            printf("✗ 接收错误，请检查 UART 配置\n");
            break;

        case FPM383C::Status::InvalidResponse:
            printf("✗ 无效响应，数据包损坏或校验失败\n");
            break;

        case FPM383C::Status::ModuleError:
            printf("✗ 模块内部错误\n");
            break;

        case FPM383C::Status::Busy:
            printf("✗ 模块忙，请稍后重试\n");
            break;

        default:
            printf("✗ 未知错误\n");
            break;
    }
}

/**
 * @brief UART 接收完成回调（需要在 stm32f1xx_it.c 中调用）
 */
extern "C" void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
    if (huart == &huart1) {
        fingerprint.UartRxCallback(Size);
    }
}

/**
 * @brief 主函数中调用所有示例
 */
void RunAllExamples() {
    printf("\n");
    printf("╔═══════════════════════════════════════╗\n");
    printf("║   FPM383C 指纹识别模块使用示例      ║\n");
    printf("╚═══════════════════════════════════════╝\n");
    printf("\n");

    Example_BasicInitialization();
    HAL_Delay(1000);

    Example_AsyncCallbacks();
    HAL_Delay(1000);

    Example_ErrorHandling();
    HAL_Delay(1000);

    // 交互式示例（需要用户操作）
    // Example_SyncMatch();
    // Example_SyncEnroll();
    // Example_DeleteFingerprint();
    // Example_SetPassword();

    printf("\n");
    printf("✓ 所有示例运行完成！\n");
    printf("\n");
}
